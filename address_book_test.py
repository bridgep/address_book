"""
Tests written for the module address_book.py

How to run:

python address_book_test.py
"""

__author__ = 'Bridgette Perrers'
__email__ = 'bperrers@hotmail.com'

import os
import json
import yaml
import unittest
import address_book
import address_book_encoding


class AddressBookTest(unittest.TestCase):
    """
    Unit tests for the AddressBook and Contacts classes.
    """

    def setUp(self):
        """
        Create an instance of the AddressBook class, and other relevant test data.
        """

        self.test_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'test_data')
        self.contacts_dir = os.path.join(self.test_dir, 'contacts')

        self.address_book_files = {
            'formatted_text': os.path.join(self.test_dir, 'address_book.txt'),
            'html_table': os.path.join(self.test_dir, 'address_book.html')
        }

        self.name = 'Bridgette Perrers'
        self.address = '1917/22 Dorcas Street, Southbank, 3006'
        self.phone_number = '0447784777'

        self.contact_details = {
            self.name: {
                'address': self.address,
                'phone_number': self.phone_number
            }
        }

        self.contact = address_book.Contact(self.name, self.address, self.phone_number)

        self.address_book = address_book.AddressBook(self.contacts_dir)
        self.address_book.create_contact(self.name, self.address, self.phone_number)

    def tearDown(self):
        """
        Remove any contact files created during execution of test methods.
        """

        for contact_data in os.listdir(self.contacts_dir):
            file_path = os.path.abspath(os.path.join(self.contacts_dir, contact_data))
            os.remove(file_path)

    def test_to_dict(self):
        """
        Assert that the to_dict function returns a dictionary of contact data,
        matching the stored self.contact_details dictionary.
        """

        contact_data = self.contact.to_dict()
        self.assertEqual(self.contact_details, contact_data,
                         'Contact details returned by the to_dict function do not match test data')

    def test_load_contact_details(self):
        """
        Assert that the load_contact_details function correctly updates
        the Contact classes name, address and phone_number attributes.
        """

        contact_file = (os.path.join(self.test_dir, 'Bridgette_Perrers.json'))

        contact = address_book.Contact()
        contact.load_contact_details(contact_file)

        self.assertEqual(self.name, contact.name,
                         'Name does not match test data')

        self.assertEqual(self.address, contact.address,
                         'Address does not match test data')

        self.assertEqual(self.phone_number, contact.phone_number,
                         'Phone number does not match test data')

    def test_save_contact_details(self):
        """
        Assert that the contact details files generated by the
        save_contact_details function contain dictionaries of contact data
        that matches the stored self.contact_details dictionary
        """

        file_paths = self.contact.save_contact_details(self.contacts_dir)

        for file_path in file_paths:
            self.assertTrue(os.path.isfile(file_path),
                            """The object {0} returned by the save_contact_data
                            function is not a valid file""".format(file_path))

            file_encoding = ''
            file_name, file_extension = os.path.splitext(file_path)

            for encoding, extension in self.contact.supported_file_formats.items():
                if file_extension == extension:
                    file_encoding = encoding

            self.assertTrue(file_encoding in self.contact.supported_file_formats.keys())

            contact_dict = address_book_encoding.read_file(file_path, file_encoding)

            self.assertEqual(self.contact_details, contact_dict,
                             'Generated file {0} does not match test data'.format(file_path))

    def test_filter_contacts(self):
        """
        Assert that the filter_contacts function correctly returns
        any contact with Bridgette in the name.
        """

        filtered_contacts = self.address_book.filter_contacts('Bridgette*')
        filtered_names = [i for i in filtered_contacts if 'Bridgette' in i.name]

        self.assertTrue(filtered_names != [],
                        'Filter contacts returned no matches')

    def test_save_address_book(self):
        """
        Assert that the files generated by the
        save_address_book function match the stored test data.
        """

        file_paths = self.address_book.save_address_book()

        for file_path in file_paths:
            self.assertTrue(os.path.isfile(file_path),
                            'Object returned by the save_address_book function is not a valid file')

            file_encoding = ''
            file_name, file_extension = os.path.splitext(file_path)

            for encoding, extension in self.address_book.supported_file_formats.items():
                if file_extension == extension:
                    file_encoding = encoding

                    self.assertTrue(file_encoding in self.address_book.supported_file_formats.keys())

                    control_file_path = self.address_book_files.get(encoding)

            test_data = address_book_encoding.read_file(file_path, file_encoding)
            control_data = address_book_encoding.read_file(control_file_path, file_encoding)

            self.assertEqual(test_data, control_data,
                             'Generated file {0} does not match test data'.format(file_path))


if __name__ == '__main__':
    unittest.main()

